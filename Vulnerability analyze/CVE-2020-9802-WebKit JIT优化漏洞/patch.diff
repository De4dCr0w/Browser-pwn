diff --git a/Source/JavaScriptCore/runtime/JSCast.h b/Source/JavaScriptCore/runtime/JSCast.h
index e8b23ce599d3..f80db88befb3 100644
--- a/Source/JavaScriptCore/runtime/JSCast.h
+++ b/Source/JavaScriptCore/runtime/JSCast.h
@@ -33,12 +33,14 @@ template<typename To, typename From>
 inline To jsCast(From* from)
 {
     static_assert(std::is_base_of<JSCell, typename std::remove_pointer<To>::type>::value && std::is_base_of<JSCell, typename std::remove_pointer<From>::type>::value, "JS casting expects that the types you are casting to/from are subclasses of JSCell");
+/*
 #if (ASSERT_ENABLED || ENABLE(SECURITY_ASSERTIONS)) && CPU(X86_64)
     if (from && !from->JSCell::inherits(from->JSCell::vm(), std::remove_pointer<To>::type::info()))
         reportZappedCellAndCrash(*from->JSCell::heap(), from);
 #else
     ASSERT_WITH_SECURITY_IMPLICATION(!from || from->JSCell::inherits(from->JSCell::vm(), std::remove_pointer<To>::type::info()));
 #endif
+*/
     return static_cast<To>(from);
 }
 
@@ -46,14 +48,14 @@ template<typename To>
 inline To jsCast(JSValue from)
 {
     static_assert(std::is_base_of<JSCell, typename std::remove_pointer<To>::type>::value, "JS casting expects that the types you are casting to is a subclass of JSCell");
-#if (ASSERT_ENABLED || ENABLE(SECURITY_ASSERTIONS)) && CPU(X86_64)
-    ASSERT_WITH_SECURITY_IMPLICATION(from.isCell());
-    JSCell* cell = from.asCell();
-    if (!cell->JSCell::inherits(cell->vm(), std::remove_pointer<To>::type::info()))
-        reportZappedCellAndCrash(*cell->JSCell::heap(), cell);
-#else
-    ASSERT_WITH_SECURITY_IMPLICATION(from.isCell() && from.asCell()->JSCell::inherits(from.asCell()->vm(), std::remove_pointer<To>::type::info()));
-#endif
+// #if (ASSERT_ENABLED || ENABLE(SECURITY_ASSERTIONS)) && CPU(X86_64)
+    // ASSERT_WITH_SECURITY_IMPLICATION(from.isCell());
+    // JSCell* cell = from.asCell();
+    // if (!cell->JSCell::inherits(cell->vm(), std::remove_pointer<To>::type::info()))
+        // reportZappedCellAndCrash(*cell->JSCell::heap(), cell);
+// #else
+    // ASSERT_WITH_SECURITY_IMPLICATION(from.isCell() && from.asCell()->JSCell::inherits(from.asCell()->vm(), std::remove_pointer<To>::type::info()));
+// #endif
     return static_cast<To>(from.asCell());
 }
 
@@ -131,7 +133,7 @@ inline bool inheritsJSTypeImpl(VM& vm, From* from, JSType firstType, JSType last
     static_assert(std::is_base_of<JSCell, Target>::value && std::is_base_of<JSCell, typename std::remove_pointer<From>::type>::value, "JS casting expects that the types you are casting to/from are subclasses of JSCell");
     bool canCast = firstType <= from->type() && from->type() <= lastType;
     // Do not use inherits<Target>(vm) since inherits<T> depends on this function.
-    ASSERT_UNUSED(vm, canCast == from->JSCell::inherits(vm, Target::info()));
+    // ASSERT_UNUSED(vm, canCast == from->JSCell::inherits(vm, Target::info()));
     return canCast;
 }
 
diff --git a/Source/JavaScriptCore/runtime/WriteBarrier.h b/Source/JavaScriptCore/runtime/WriteBarrier.h
index 707e20b6e5ac..3d81c42b7617 100644
--- a/Source/JavaScriptCore/runtime/WriteBarrier.h
+++ b/Source/JavaScriptCore/runtime/WriteBarrier.h
@@ -52,7 +52,7 @@ template<> class WriteBarrierBase<JSValue>;
 JS_EXPORT_PRIVATE void slowValidateCell(JSCell*);
 JS_EXPORT_PRIVATE void slowValidateCell(JSGlobalObject*);
     
-#if ENABLE(GC_VALIDATION)
+/*#if ENABLE(GC_VALIDATION)
 template<class T> inline void validateCell(T cell)
 {
     ASSERT_GC_OBJECT_INHERITS(cell, std::remove_pointer<T>::type::info());
@@ -68,10 +68,11 @@ template<> inline void validateCell<JSGlobalObject*>(JSGlobalObject* globalObjec
     slowValidateCell(globalObject);
 }
 #else
+*/
 template<class T> inline void validateCell(T)
 {
 }
-#endif
+// #endif
 
 // We have a separate base class with no constructors for use in Unions.
 template <typename T, typename Traits> class WriteBarrierBase {